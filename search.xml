<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title>Java 函数式接口</title>
    <url>/2017/04/07/Java-%E5%87%BD%E6%95%B0%E5%BC%8F%E6%8E%A5%E5%8F%A3/</url>
    <content><![CDATA[<h2 id="Java-8-函数式接口"><a href="#Java-8-函数式接口" class="headerlink" title="Java 8 函数式接口"></a>Java 8 函数式接口</h2><h3 id="函数接口概述"><a href="#函数接口概述" class="headerlink" title="函数接口概述"></a>函数接口概述</h3><p>函数式接口(Functional Interface)就是一个有且仅有一个抽象方法，但是可以有多个非抽象方法的接口。<br>函数式接口可以被隐式转换为 lambda 表达式。<br>Lambda 表达式和方法引用（实际上也可认为是Lambda表达式）上。</p>
<a id="more"></a>
<h3 id="函数接口定义"><a href="#函数接口定义" class="headerlink" title="函数接口定义"></a>函数接口定义</h3><p>如定义了一个函数式接口如下：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@FunctionalInterface</span></span><br><span class="line"><span class="class"><span class="keyword">interface</span> <span class="title">GreetingService</span> </span></span><br><span class="line"><span class="class"></span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">sayMessage</span><span class="params">(String message)</span></span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>那么就可以使用Lambda表达式来表示该接口的一个实现(注：JAVA 8 之前一般是用匿名类实现的)：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">GreetingService greetService1 = message -&gt; System.out.println(<span class="string">"Hello "</span> + message);</span><br></pre></td></tr></table></figure>
<h4 id="FunctionalInterface注解"><a href="#FunctionalInterface注解" class="headerlink" title="@FunctionalInterface注解"></a>@FunctionalInterface注解</h4><p>与@Override 注解的作用类似，Java 8中专门为函数式接口引入了一个新的注解： @FunctionalInterface 。该注解可用于一个接口的定义上，一旦使用该注解来定义接口，编译器将会强制检查该接口是否确实有且仅有一个抽象方法，否则将会报错。需要注意的是，即使不使用该注解，只要满足函数式接口的定义，这仍然是一个函数式接口，使用起来都一样。</p>
<h4 id="lambda表达式"><a href="#lambda表达式" class="headerlink" title="lambda表达式"></a>lambda表达式</h4><p>(参数列表)-&gt;{代码}</p>
<h3 id="常用函数式接口"><a href="#常用函数式接口" class="headerlink" title="常用函数式接口"></a>常用函数式接口</h3><h4 id="supplier生产数据函数式接口"><a href="#supplier生产数据函数式接口" class="headerlink" title="supplier生产数据函数式接口"></a>supplier生产数据函数式接口</h4><p>Supplier 接口翻译过来就是提供者，目的是生产数据，该接口对应的方法类型为不接受参数，但是提供一个返回值，通俗的理解为这种接口是无私的奉献者，不仅不要参数，还返回一个值，使用get()方法获得这个返回值。</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">    Supplier&lt;String&gt; getInstance = () -&gt; <span class="string">"HelloWorld!"</span>;</span><br><span class="line">    System.out.println(getInstance.get());</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h4 id="Consumer消费函数式接口"><a href="#Consumer消费函数式接口" class="headerlink" title="Consumer消费函数式接口"></a>Consumer消费函数式接口</h4><p>该接口对应的方法类型为接收一个参数，没有返回值，可以通俗的理解成将这个参数’消费掉了’，一般来说使用Consumer接口往往伴随着一些期望状态的改变或者事件的发生，例如最典型的forEach就是使用的Consumer接口，虽然没有任何的返回值，但是却向控制台输出了语句。<br>Consumer 使用accept对参数执行行为。</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">accept(T t)</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">    StringBuilder sb = <span class="keyword">new</span> StringBuilder(<span class="string">"Hello "</span>);</span><br><span class="line">    Consumer&lt;StringBuilder&gt; consumer = (str) -&gt; str.append(<span class="string">"Jack!"</span>);</span><br><span class="line">    consumer.accept(sb);</span><br><span class="line">    System.out.println(sb.toString());	<span class="comment">// Hello Jack!</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">andThen(Consumer&lt;? <span class="keyword">super</span> T&gt; after)</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">    Consumer&lt;StringBuilder&gt; consumer1 = (str) -&gt; str.append(<span class="string">" Bob!"</span>);</span><br><span class="line">    consumer.andThen(consumer1).accept(sb);</span><br><span class="line">    System.out.println(sb.toString());	<span class="comment">// Hello Jack! Bob</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h4 id="Functio-lt-T-R-gt-类型转换函数式接口"><a href="#Functio-lt-T-R-gt-类型转换函数式接口" class="headerlink" title="Functio&lt;T,R&gt; 类型转换函数式接口"></a>Functio&lt;T,R&gt; 类型转换函数式接口</h4><p>T—函数的输入类型，R-函数的输出类型，也就是通过这个函数，可以将一个类型转换为另一个类型，比如下面的例子<br> <figure class="highlight java"><table><tr><td class="code"><pre><span class="line">apply(T t)</span><br><span class="line"> <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">    Function&lt;String, String&gt; function = a -&gt; a + <span class="string">" Jack!"</span>;</span><br><span class="line">    System.out.println(function.apply(<span class="string">"Hello"</span>)); <span class="comment">// Hello Jack!</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"> andThen(Function&lt;? <span class="keyword">super</span> R,? extends V&gt; after)</span><br><span class="line"> <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">    Function&lt;String, String&gt; function = a -&gt; a + <span class="string">" Jack!"</span>;</span><br><span class="line">    Function&lt;String, String&gt; function1 = a -&gt; a + <span class="string">" Bob!"</span>;</span><br><span class="line">    String greet = function.andThen(function1).apply(<span class="string">"Hello"</span>);</span><br><span class="line">    System.out.println(greet); <span class="comment">// Hello Jack! Bob!</span></span><br><span class="line"> &#125;</span><br></pre></td></tr></table></figure></p>
<h4 id="Predicate-断言函数式接口"><a href="#Predicate-断言函数式接口" class="headerlink" title="Predicate 断言函数式接口"></a>Predicate 断言函数式接口</h4><p>predicate&lt;T,Boolean&gt; 断言接口，顾名思义，中文中的‘是’与‘不是’是中文语法的谓语，同样的该接口对应的方法为接收一个参数，返回一个Boolean类型值，多用于判断与过滤，当然你可以把他理解成特殊的Funcation&lt;T,R&gt;，但是为了便于区分语义，还是单独的划了一个接口，使用test()方法执行这段行为</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">   </span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">   Predicate&lt;Integer&gt; predicate = number -&gt; number != <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line">    test(T t) 等价于 ==</span><br><span class="line">    System.out.println(predicate.test(<span class="number">10</span>));    <span class="comment">//true</span></span><br><span class="line">    </span><br><span class="line">    and(Predicate&lt;? <span class="keyword">super</span> T&gt; other) 等价于 and</span><br><span class="line">    predicate = predicate.and(number -&gt; number &gt;= <span class="number">10</span>);</span><br><span class="line">    System.out.println(predicate.test(<span class="number">10</span>));    <span class="comment">//true</span></span><br><span class="line"></span><br><span class="line">    or(Predicate&lt;? <span class="keyword">super</span> T&gt; other) 等价于 or</span><br><span class="line">    predicate = predicate.or(number -&gt; number != <span class="number">10</span>);</span><br><span class="line">    System.out.println(predicate.test(<span class="number">10</span>));    <span class="comment">//true</span></span><br><span class="line"></span><br><span class="line">    negate() 等价于 !=</span><br><span class="line">    predicate = predicate.negate();</span><br><span class="line">    System.out.println(predicate.test(<span class="number">10</span>));    <span class="comment">//false</span></span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>Java</category>
      </categories>
      <tags>
        <tag>函数式接口</tag>
        <tag>接口</tag>
        <tag>Java8</tag>
      </tags>
  </entry>
  <entry>
    <title>Java 单列集合</title>
    <url>/2017/03/20/Java-%E5%8D%95%E5%88%97%E9%9B%86%E5%90%88/</url>
    <content><![CDATA[<h2 id="集合"><a href="#集合" class="headerlink" title="集合"></a>集合</h2><p>集合类的特点：提供一种存储空间可变的存储模式存储的数据容量可以随时发生改变。<br>和数组的区别：数组是存储同种数据类型、长度在定义后便不可变。<br>集合分为单列集合(Collection)和双列集合(Map)</p>
<a id="more"></a>
<h3 id="Collection集合的概述"><a href="#Collection集合的概述" class="headerlink" title="Collection集合的概述"></a>Collection集合的概述</h3><p>Collection是单列集合的顶层接口，它表示一组对象，这些对象也称为Collection的元素；JDK不提供此接口的任何直接实现，它提供更具体的子接口(如Set、List)实现。</p>
<h3 id="Collection常用的方法"><a href="#Collection常用的方法" class="headerlink" title="Collection常用的方法"></a>Collection常用的方法</h3><p>添加元素<code>boolean add()</code>、移除<code>boolean remove()</code>、清空<code>void clear()</code>、判断集合是否存在某个元素<code>boolean contains()</code>、判断集合是否为空<code>boolean sEmpty()</code>、获取集合的长度<code>int size()</code>。</p>
<h3 id="Collection集合的遍历-迭代器"><a href="#Collection集合的遍历-迭代器" class="headerlink" title="Collection集合的遍历(迭代器)"></a>Collection集合的遍历(迭代器)</h3><p>迭代器的介绍：是集合的专用遍历方式，通过集合的iterator iterator()方法得到。</p>
<p>迭代器的方法：hasNext()方法判断迭代中是否还有元素。如果有则调用next()方法返 下一个元素。值得一提的是增强for循环本质就是一个迭代器。</p>
<p>Collection集合按照不同的特点可分为两类子集合List和Set</p>
<h3 id="List集合"><a href="#List集合" class="headerlink" title="List集合"></a>List集合</h3><p>List集合的特点：有序(元素的存储顺序一致)、有索引、可重复。</p>
<p>List集合的常用方法：void add()、remove()、set()、get()。都是基于索引进行的增删改查。</p>
<p>列表迭代器：List集合的特有遍历，通过listIterator()方法得到。主要用途是可以沿着任一方向进行遍历，逆向方法hasPrevious()，Previous()。值得注意的是列表迭代器在迭代期间修改列表，返回迭代器的当前位置，所以在进行逆向遍历前先进行正向遍历。</p>
<h4 id="List集合的两个实现类："><a href="#List集合的两个实现类：" class="headerlink" title="List集合的两个实现类："></a>List集合的两个实现类：</h4><p>ArrayList：底层是数组，查询快，增删慢，线程不同步，效率高。</p>
<p>LinkedList：底层是链表，增删快，查询慢，线程不同步，效率高。特有方法first()可以获取(删除，得到)列表的一个元素，Last()同理。</p>
<h3 id="Set集合"><a href="#Set集合" class="headerlink" title="Set集合"></a>Set集合</h3><p>Set集合的特点：无序，无索引(所以没有普通for循环)，唯一(不可重复)</p>
<h4 id="哈希值"><a href="#哈希值" class="headerlink" title="哈希值"></a>哈希值</h4><p>哈希值的概念：是JDK根据对象的地址或者字符串或者数字算出来的int类型的数值。</p>
<p>如何获取哈希值：通过object类中的hashcode()：返回对象的哈希值；</p>
<p>哈希值的特点：1、同一个对象调用hashCode()方法返回的哈希值是相同的；2、不同的对象可以通过重写hashCode()方法得到相同的哈希值。</p>
<h4 id="Set集合的三个实现类："><a href="#Set集合的三个实现类：" class="headerlink" title="Set集合的三个实现类："></a>Set集合的三个实现类：</h4><p>HashSet：底层是哈希表，无序，无索引(不能使用普通for),hashcode保证唯一性</p>
<p><img src="/img/hashset.png" alt="HashSet"></p>
<p>LinkedHashSet：底层是哈希表和链表，有序，无索引，唯一。</p>
<p>TreeSet：底层是二叉树，有序(指按照一定规则排序)，无索引，唯一。</p>
<p>自然排序：实现compareable接口，复写compareTo方法，当主要条件相等时要比较次要元素，保证唯一性的语句是compareTo方法return0</p>
<p>比较器排序：当元素不具备比较性，或者具备的比较性不符合需求，那么就让集合自身具备比较性，定义一个类实现Compare接口，重写compare()方法。</p>
]]></content>
      <categories>
        <category>Java</category>
      </categories>
      <tags>
        <tag>集合</tag>
        <tag>单列集合</tag>
        <tag>Collection</tag>
      </tags>
  </entry>
  <entry>
    <title>Java 双列集合</title>
    <url>/2017/03/21/Java-%E5%8F%8C%E5%88%97%E9%9B%86%E5%90%88/</url>
    <content><![CDATA[<h3 id="Map接口概述"><a href="#Map接口概述" class="headerlink" title="Map接口概述"></a>Map接口概述</h3><p>Map是双列集合的顶层接口，Map接口下是一个键值对（key-value）的映射接口，Map集合中，不能包含重复的键，每个键只能映射一个值（元素），值可以重复，因此可以根据key快速查找value的值。</p>
<a id="more"></a>

<h3 id="Map接口常用的方法"><a href="#Map接口常用的方法" class="headerlink" title="Map接口常用的方法"></a>Map接口常用的方法</h3><p>1、<code>void clear()</code>  从该地图中删除所有的映射（可选操作）。<br>2、<code>boolean containsKey(Object key)</code> 如果此映射包含指定键的映射，则返回 true 。<br>3、<code>boolean containsValue(Object value)</code> 如果此地图将一个或多个键映射到指定的值，则返回 true 。<br>4、<code>Set&lt;Map.Entry&lt;K,V&gt;&gt; entrySet()</code> 返回此地图中包含的映射的Set视图。<br>5、<code>Set&lt;K&gt; keySet()</code>返回此地图中包含的键的Set视图。<br>6、<code>V     put(K key, V value)</code> 将指定的值与该映射中的指定键相关联（可选操作）。<br>7、<code>V    remove(Object key)</code> 如果存在（从可选的操作），从该地图中删除一个键的映射。<br>8、<code>int  size()</code> 返回此地图中键值映射的数量。</p>
<h3 id="常用实现类"><a href="#常用实现类" class="headerlink" title="常用实现类"></a>常用实现类</h3><h4 id="Class-HashMap-lt-K-V-gt"><a href="#Class-HashMap-lt-K-V-gt" class="headerlink" title="Class HashMap&lt;K,V&gt;"></a>Class HashMap&lt;K,V&gt;</h4><p>基于哈希表的实现的Map接口。 此实现提供了所有可选的地图操作，并允许null的值和null键。 （ HashMap类大致相当于Hashtable ，除了它是不同步的，并允许null）。这个类不能保证地图的顺序; 特别是，它不能保证订单在一段时间内保持不变。<br>HashMap非线程安全，即任一时刻可以有多个线程同时写HashMap，可能会导致数据的不一致。如果需要满足线程安全，可以用 Collections的synchronizedMap方法使HashMap具有线程安的能力，或者使用ConcurrentHashMap。<br>HashMap在JDK1.8之前的实现方式 数组+链表,但是在JDK1.8后对HashMap进行了底层优化,改为了由 数组+链表+红黑树实现,主要的目的是提高查找效率。</p>
<h4 id="Class-LinkedHashMap-lt-K-V-gt"><a href="#Class-LinkedHashMap-lt-K-V-gt" class="headerlink" title="Class LinkedHashMap&lt;K,V&gt;"></a>Class LinkedHashMap&lt;K,V&gt;</h4><p>LinkedHashMap继承于HashMap，哈希表和链表实现的Map接口，具有可预测的迭代次序。 这种实现不同于HashMap，它维持于所有条目的运行双向链表。 此链接列表定义迭代排序，通常是将键插入到地图（插入顺序 ）中的顺序 。 请注意，如果将键重新插入到地图中，则插入顺序不受影响。 （A键k被重新插入到地图m如果当m.containsKey(k)将返回true之前立即调用m.put(k, v)被调用。）</p>
<h4 id="Class-Hashtable-lt-K-V-gt"><a href="#Class-Hashtable-lt-K-V-gt" class="headerlink" title="Class Hashtable&lt;K,V&gt;"></a>Class Hashtable&lt;K,V&gt;</h4><p>该类实现了一个哈希表，它将键映射到值。 任何非null对象都可以用作键值或值。<br>为了从散列表成功存储和检索对象，用作键的对象必须实现hashCode方法和equals方法。<br>Hashtable是遗留类，很多映射的常用功能与HashMap类似，不同的是它承自Dictionary类，并且是线程安全的，任一时间只有一个线程能写Hashtable，并发性不如ConcurrentHashMap，因为ConcurrentHashMap引入了分段锁。Hashtable不建议在新代码中使用，不需要线程安全的场合可以用HashMap替换，需要线程安全的场合可以用ConcurrentHashMap替换。</p>
<h4 id="TreeMap"><a href="#TreeMap" class="headerlink" title="TreeMap"></a>TreeMap</h4><p>一个红黑树基于NavigableMap实现。 该地图是根据排序natural ordering其密钥，或通过Comparator在地图创建时提供，这取决于所使用的构造方法。<br>TreeMap实现SortedMap接口，能够把它保存的记录根据键排序，默认是按键值的升序排序，也可以指定排序的比较器，当用Iterator遍历TreeMap时，得到的记录是排过序的。如果使用排序的映射，建议使用TreeMap。在使用TreeMap时，key必须实现Comparable接口或者在构造TreeMap传入自定义的Comparator，否则会在运行时抛出java.lang.ClassCastException类型的异常。</p>
]]></content>
      <categories>
        <category>Java</category>
      </categories>
      <tags>
        <tag>集合</tag>
        <tag>双列集合</tag>
        <tag>Map</tag>
      </tags>
  </entry>
  <entry>
    <title>Java8 Stream流</title>
    <url>/2017/05/11/Java8-Stream%E6%B5%81/</url>
    <content><![CDATA[<h2 id="Java-8-Stream流"><a href="#Java-8-Stream流" class="headerlink" title="Java 8 Stream流"></a>Java 8 Stream流</h2><h3 id="Java-8-Stream流概述"><a href="#Java-8-Stream流概述" class="headerlink" title="Java 8 Stream流概述"></a>Java 8 Stream流概述</h3><p>虽然JAVA8中的stream API与JAVA I/O中的InputStream和OutputStream在名字上比较类似，但是其实是另外一个东西，Stream API是JAVA函数式编程中的一个重要组成部分。</p>
<a id="more"></a>
<h3 id="Streams如何工作？"><a href="#Streams如何工作？" class="headerlink" title="Streams如何工作？"></a>Streams如何工作？</h3><p>stream是一个可以对单列集合中的元素执行各种计算操作的一个元素序列。</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">List&lt;String&gt; myList = Arrays.asList(<span class="string">"a1"</span>, <span class="string">"a2"</span>, <span class="string">"b1"</span>, <span class="string">"c2"</span>, <span class="string">"c1"</span>);</span><br><span class="line">myList.stream()</span><br><span class="line">      .filter(s -&gt; s.startsWith(<span class="string">"c"</span>))</span><br><span class="line">      .map(String::toUpperCase)</span><br><span class="line">      .sorted()</span><br><span class="line">      .forEach(System.out::println);</span><br><span class="line">      <span class="comment">// C1</span></span><br><span class="line">      <span class="comment">// C2</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>stream包含中间（intermediate operations）和最终（terminal operation）两种形式的操作。中间操作（intermediate operations）的返回值还是一个stream，因此可以通过链式调用将中间操作（intermediate operations）串联起来。最终操作（terminal operation）只能返回void或者一个非stream的结果。在上述例子中：<code>filter</code>, <code>map</code> ，<code>sorted</code>是中间操作，而<code>forEach</code>是一个最终操作。更多关于stream的中可用的操作可以查看java doc。上面例子中的链式调用也被称为操作管道流。</p>
<p>大多数流操作都接受某种lambda表达式参数，这是一个指定操作确切行为的功能接口。这些操作大多数都必须是无干扰的和无状态的。这意味着什么？</p>
<p>当函数不修改流的基础数据源时，它是无干扰的，例如，在上面的示例中，没有lambda表达式myList通过添加或删除集合中的元素来进行修改。</p>
<p>当操作的执行是确定性的时，函数是无状态的，例如，在上面的示例中，lambda表达式不依赖于外部变量的任何可变变量或状态，这些变量或状态可能在执行期间发生变化。</p>
<h3 id="不同类型的流"><a href="#不同类型的流" class="headerlink" title="不同类型的流"></a>不同类型的流</h3><p>可以从各种数据源（尤其是集合）创建流。列表和集合支持新方法，<code>stream()</code>并<code>parallelStream()</code>可以创建顺序流或并行流。并行流能够在多个线程上运行，并且将在本教程的后续部分中介绍。现在，我们关注顺序流：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">Arrays.asList(<span class="string">"a1"</span>, <span class="string">"a2"</span>, <span class="string">"a3"</span>)</span><br><span class="line">    .stream()</span><br><span class="line">    .findFirst()</span><br><span class="line">    .ifPresent(System.out::println);  <span class="comment">// a1</span></span><br></pre></td></tr></table></figure>
<p><code>stream()</code>在对象列表上调用该方法将返回常规对象流。但是我们不必创建集合即可使用流，如我们在下一个代码示例中看到的那样：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">Stream.of(<span class="string">"a1"</span>, <span class="string">"a2"</span>, <span class="string">"a3"</span>)</span><br><span class="line">    .findFirst()</span><br><span class="line">    .ifPresent(System.out::println);  <span class="comment">// a1</span></span><br></pre></td></tr></table></figure>
<p>仅用于<code>Stream.of()</code>从一堆对象引用创建流。</p>
<p>除了常规对象流之外，Java 8还附带了特殊的流，用于处理原始数据类型<code>int</code>，<code>long</code>以及<code>double</code>。您可能已经猜到了<code>IntStream</code>，<code>LongStream</code>和<code>DoubleStream</code>。</p>
<p>IntStreams可以使用以下方法替换常规的for循环<code>IntStream.range()</code>：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">IntStream.range(<span class="number">1</span>, <span class="number">4</span>)</span><br><span class="line">    .forEach(System.out::println);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 1</span></span><br><span class="line"><span class="comment">// 2</span></span><br><span class="line"><span class="comment">// 3</span></span><br></pre></td></tr></table></figure>
<p>所有这些原始流都像常规对象流一样工作，但有以下区别：原始流使用专用的lambda表达式，例如<code>IntFunction</code>代替<code>Function</code>或<code>IntPredicate</code>代替<code>Predicate</code>。基本流支持其他终端聚合操作<code>sum()</code>和<code>average()</code>：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">Arrays.stream(<span class="keyword">new</span> <span class="keyword">int</span>[] &#123;<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>&#125;)</span><br><span class="line">    .map(n -&gt; <span class="number">2</span> * n + <span class="number">1</span>)</span><br><span class="line">    .average()</span><br><span class="line">    .ifPresent(System.out::println);  <span class="comment">// 5.0</span></span><br></pre></td></tr></table></figure>
<p>有时将常规对象流转换为原始流很有用，反之亦然。为此，对象流支持特殊的映射操作<code>mapToInt()</code>，<code>mapToLong()</code>并且<code>mapToDouble</code>：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">Stream.of(<span class="string">"a1"</span>, <span class="string">"a2"</span>, <span class="string">"a3"</span>)</span><br><span class="line">    .map(s -&gt; s.substring(<span class="number">1</span>))</span><br><span class="line">    .mapToInt(Integer::parseInt)</span><br><span class="line">    .max()</span><br><span class="line">    .ifPresent(System.out::println);  <span class="comment">// 3</span></span><br></pre></td></tr></table></figure>
<p>原始流可以通过以下方式转换为对象流mapToObj()：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">IntStream.range(<span class="number">1</span>, <span class="number">4</span>)</span><br><span class="line">    .mapToObj(i -&gt; <span class="string">"a"</span> + i)</span><br><span class="line">    .forEach(System.out::println);</span><br><span class="line"></span><br><span class="line"><span class="comment">// a1</span></span><br><span class="line"><span class="comment">// a2</span></span><br><span class="line"><span class="comment">// a3</span></span><br></pre></td></tr></table></figure>
<p>这是一个组合的示例：双精度流首先映射到int流，然后映射到字符串对象流：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">Stream.of(<span class="number">1.0</span>, <span class="number">2.0</span>, <span class="number">3.0</span>)</span><br><span class="line">    .mapToInt(Double::intValue)</span><br><span class="line">    .mapToObj(i -&gt; <span class="string">"a"</span> + i)</span><br><span class="line">    .forEach(System.out::println);</span><br><span class="line"></span><br><span class="line"><span class="comment">// a1</span></span><br><span class="line"><span class="comment">// a2</span></span><br><span class="line"><span class="comment">// a3</span></span><br></pre></td></tr></table></figure>
<h3 id="处理订单号"><a href="#处理订单号" class="headerlink" title="处理订单号"></a>处理订单号</h3><p>既然我们已经学习了如何创建和使用不同类型的流，那么让我们更深入地了解如何在后台处理流操作。</p>
<p>中间操作的一个重要特征是懒惰。查看以下缺少终端操作的示例：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">Stream.of(<span class="string">"d2"</span>, <span class="string">"a2"</span>, <span class="string">"b1"</span>, <span class="string">"b3"</span>, <span class="string">"c"</span>)</span><br><span class="line">    .filter(s -&gt; &#123;</span><br><span class="line">        System.out.println(<span class="string">"filter: "</span> + s);</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">true</span>;</span><br><span class="line">    &#125;);</span><br></pre></td></tr></table></figure>
<p>执行此代码段时，没有任何内容打印到控制台。这是因为仅当存在终端操作时才执行中间操作。</p>
<p>让我们通过终端操作扩展以上示例forEach：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">Stream.of(<span class="string">"d2"</span>, <span class="string">"a2"</span>, <span class="string">"b1"</span>, <span class="string">"b3"</span>, <span class="string">"c"</span>)</span><br><span class="line">    .filter(s -&gt; &#123;</span><br><span class="line">        System.out.println(<span class="string">"filter: "</span> + s);</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">true</span>;</span><br><span class="line">    &#125;)</span><br><span class="line">    .forEach(s -&gt; System.out.println(<span class="string">"forEach: "</span> + s));</span><br><span class="line">执行此代码段将在控制台上产生所需的输出：</span><br></pre></td></tr></table></figure>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">filter:  d2</span><br><span class="line">forEach: d2</span><br><span class="line">filter:  a2</span><br><span class="line">forEach: a2</span><br><span class="line">filter:  b1</span><br><span class="line">forEach: b1</span><br><span class="line">filter:  b3</span><br><span class="line">forEach: b3</span><br><span class="line">filter:  c</span><br><span class="line">forEach: c</span><br></pre></td></tr></table></figure>
<p>结果的顺序可能令人惊讶。天真的方法是在流的所有元素上一个接一个地水平执行操作。但是，每个元素都沿链垂直移动。然后，第一个字符串“ d2”通过，<code>filter</code>然后<code>forEach</code>才处理第二个字符串“ a2”。</p>
<p>这种行为可以减少在每个元素上执行的实际操作数，如下例所示：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">Stream.of(<span class="string">"d2"</span>, <span class="string">"a2"</span>, <span class="string">"b1"</span>, <span class="string">"b3"</span>, <span class="string">"c"</span>)</span><br><span class="line">    .map(s -&gt; &#123;</span><br><span class="line">        System.out.println(<span class="string">"map: "</span> + s);</span><br><span class="line">        <span class="keyword">return</span> s.toUpperCase();</span><br><span class="line">    &#125;)</span><br><span class="line">    .anyMatch(s -&gt; &#123;</span><br><span class="line">        System.out.println(<span class="string">"anyMatch: "</span> + s);</span><br><span class="line">        <span class="keyword">return</span> s.startsWith(<span class="string">"A"</span>);</span><br><span class="line">    &#125;);</span><br><span class="line"></span><br><span class="line"><span class="comment">// map:      d2</span></span><br><span class="line"><span class="comment">// anyMatch: D2</span></span><br><span class="line"><span class="comment">// map:      a2</span></span><br><span class="line"><span class="comment">// anyMatch: A2</span></span><br></pre></td></tr></table></figure>
<p>谓词应用于给定输入元素后，该操作<code>anyMatch</code>将<code>true</code>立即返回。对于通过“ A2”的第二个元素，这是正确的。由于流链是垂直执行的，<code>map</code>因此在这种情况下只需执行两次。因此，<code>map</code>将尽可能少地调用而不是映射流的所有元素。</p>
<h4 id="为什么为了事项"><a href="#为什么为了事项" class="headerlink" title="为什么为了事项"></a>为什么为了事项</h4><p>下一个示例包括两个中间操作<code>map</code>和<code>filter</code>和终端操作<code>forEach</code>。让我们再次检查这些操作是如何执行的：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">Stream.of(<span class="string">"d2"</span>, <span class="string">"a2"</span>, <span class="string">"b1"</span>, <span class="string">"b3"</span>, <span class="string">"c"</span>)</span><br><span class="line">    .map(s -&gt; &#123;</span><br><span class="line">        System.out.println(<span class="string">"map: "</span> + s);</span><br><span class="line">        <span class="keyword">return</span> s.toUpperCase();</span><br><span class="line">    &#125;)</span><br><span class="line">    .filter(s -&gt; &#123;</span><br><span class="line">        System.out.println(<span class="string">"filter: "</span> + s);</span><br><span class="line">        <span class="keyword">return</span> s.startsWith(<span class="string">"A"</span>);</span><br><span class="line">    &#125;)</span><br><span class="line">    .forEach(s -&gt; System.out.println(<span class="string">"forEach: "</span> + s));</span><br><span class="line"></span><br><span class="line"><span class="comment">// map:     d2</span></span><br><span class="line"><span class="comment">// filter:  D2</span></span><br><span class="line"><span class="comment">// map:     a2</span></span><br><span class="line"><span class="comment">// filter:  A2</span></span><br><span class="line"><span class="comment">// forEach: A2</span></span><br><span class="line"><span class="comment">// map:     b1</span></span><br><span class="line"><span class="comment">// filter:  B1</span></span><br><span class="line"><span class="comment">// map:     b3</span></span><br><span class="line"><span class="comment">// filter:  B3</span></span><br><span class="line"><span class="comment">// map:     c</span></span><br><span class="line"><span class="comment">// filter:  C</span></span><br></pre></td></tr></table></figure>
<p>您可能已经猜到了两者，map并且filter基础集合中的每个字符串都被调用了五次，而forEach仅被调用了一次。</p>
<p>如果更改操作顺序（移至filter链的开头），则可以大大减少实际的执行次数：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">Stream.of(<span class="string">"d2"</span>, <span class="string">"a2"</span>, <span class="string">"b1"</span>, <span class="string">"b3"</span>, <span class="string">"c"</span>)</span><br><span class="line">    .filter(s -&gt; &#123;</span><br><span class="line">        System.out.println(<span class="string">"filter: "</span> + s);</span><br><span class="line">        <span class="keyword">return</span> s.startsWith(<span class="string">"a"</span>);</span><br><span class="line">    &#125;)</span><br><span class="line">    .map(s -&gt; &#123;</span><br><span class="line">        System.out.println(<span class="string">"map: "</span> + s);</span><br><span class="line">        <span class="keyword">return</span> s.toUpperCase();</span><br><span class="line">    &#125;)</span><br><span class="line">    .forEach(s -&gt; System.out.println(<span class="string">"forEach: "</span> + s));</span><br><span class="line"></span><br><span class="line"><span class="comment">// filter:  d2</span></span><br><span class="line"><span class="comment">// filter:  a2</span></span><br><span class="line"><span class="comment">// map:     a2</span></span><br><span class="line"><span class="comment">// forEach: A2</span></span><br><span class="line"><span class="comment">// filter:  b1</span></span><br><span class="line"><span class="comment">// filter:  b3</span></span><br><span class="line"><span class="comment">// filter:  c</span></span><br></pre></td></tr></table></figure>
<p>现在，<code>map</code>仅调用一次，因此操作管道对于大量输入元素的执行速度要快得多。组成复杂的方法链时，请记住这一点。</p>
<p>让我们通过一个额外的操作扩展上述示例<code>sorted</code>：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">Stream.of(<span class="string">"d2"</span>, <span class="string">"a2"</span>, <span class="string">"b1"</span>, <span class="string">"b3"</span>, <span class="string">"c"</span>)</span><br><span class="line">    .sorted((s1, s2) -&gt; &#123;</span><br><span class="line">        System.out.printf(<span class="string">"sort: %s; %s\n"</span>, s1, s2);</span><br><span class="line">        <span class="keyword">return</span> s1.compareTo(s2);</span><br><span class="line">    &#125;)</span><br><span class="line">    .filter(s -&gt; &#123;</span><br><span class="line">        System.out.println(<span class="string">"filter: "</span> + s);</span><br><span class="line">        <span class="keyword">return</span> s.startsWith(<span class="string">"a"</span>);</span><br><span class="line">    &#125;)</span><br><span class="line">    .map(s -&gt; &#123;</span><br><span class="line">        System.out.println(<span class="string">"map: "</span> + s);</span><br><span class="line">        <span class="keyword">return</span> s.toUpperCase();</span><br><span class="line">    &#125;)</span><br><span class="line">    .forEach(s -&gt; System.out.println(<span class="string">"forEach: "</span> + s));</span><br></pre></td></tr></table></figure>
<p>排序是一种特殊的中间操作。这是所谓的有状态操作，因为为了对元素集合进行排序，您必须在排序期间保持状态。</p>
<p>执行此示例将得到以下控制台输出：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">sort:    a2; d2</span><br><span class="line">sort:    b1; a2</span><br><span class="line">sort:    b1; d2</span><br><span class="line">sort:    b1; a2</span><br><span class="line">sort:    b3; b1</span><br><span class="line">sort:    b3; d2</span><br><span class="line">sort:    c; b3</span><br><span class="line">sort:    c; d2</span><br><span class="line">filter:  a2</span><br><span class="line">map:     a2</span><br><span class="line">forEach: A2</span><br><span class="line">filter:  b1</span><br><span class="line">filter:  b3</span><br><span class="line">filter:  c</span><br><span class="line">filter:  d2</span><br></pre></td></tr></table></figure>
<p>首先，对整个输入集合执行排序操作。换句话说，<code>sorted</code>是水平执行的。因此，在这种情况下<code>sorted</code>，对输入集合中每个元素的多个组合调用了八次。</p>
<p>我们可以通过重新排序链来再次优化性能：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">Stream.of(<span class="string">"d2"</span>, <span class="string">"a2"</span>, <span class="string">"b1"</span>, <span class="string">"b3"</span>, <span class="string">"c"</span>)</span><br><span class="line">    .filter(s -&gt; &#123;</span><br><span class="line">        System.out.println(<span class="string">"filter: "</span> + s);</span><br><span class="line">        <span class="keyword">return</span> s.startsWith(<span class="string">"a"</span>);</span><br><span class="line">    &#125;)</span><br><span class="line">    .sorted((s1, s2) -&gt; &#123;</span><br><span class="line">        System.out.printf(<span class="string">"sort: %s; %s\n"</span>, s1, s2);</span><br><span class="line">        <span class="keyword">return</span> s1.compareTo(s2);</span><br><span class="line">    &#125;)</span><br><span class="line">    .map(s -&gt; &#123;</span><br><span class="line">        System.out.println(<span class="string">"map: "</span> + s);</span><br><span class="line">        <span class="keyword">return</span> s.toUpperCase();</span><br><span class="line">    &#125;)</span><br><span class="line">    .forEach(s -&gt; System.out.println(<span class="string">"forEach: "</span> + s));</span><br><span class="line"></span><br><span class="line"><span class="comment">// filter:  d2</span></span><br><span class="line"><span class="comment">// filter:  a2</span></span><br><span class="line"><span class="comment">// filter:  b1</span></span><br><span class="line"><span class="comment">// filter:  b3</span></span><br><span class="line"><span class="comment">// filter:  c</span></span><br><span class="line"><span class="comment">// map:     a2</span></span><br><span class="line"><span class="comment">// forEach: A2</span></span><br></pre></td></tr></table></figure>
<p>在此示例<code>sorted</code>中，因为<code>filter</code>将输入集合简化为一个元素而从未被调用。因此，对于较大的输入集合，性能会大大提高。</p>
<h3 id="重用流"><a href="#重用流" class="headerlink" title="重用流"></a>重用流</h3><p>Java 8流无法重用。调用任何终端操作后，流就立即关闭：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">Stream&lt;String&gt; stream =</span><br><span class="line">    Stream.of(<span class="string">"d2"</span>, <span class="string">"a2"</span>, <span class="string">"b1"</span>, <span class="string">"b3"</span>, <span class="string">"c"</span>)</span><br><span class="line">        .filter(s -&gt; s.startsWith(<span class="string">"a"</span>));</span><br><span class="line"></span><br><span class="line">stream.anyMatch(s -&gt; <span class="keyword">true</span>);    <span class="comment">// ok</span></span><br><span class="line">stream.noneMatch(s -&gt; <span class="keyword">true</span>);   <span class="comment">// exception</span></span><br></pre></td></tr></table></figure>
<p>在同一流上调用<code>noneMatchafte</code>r会<code>anyMatch</code>导致以下异常：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">java.lang.IllegalStateException: stream has already been operated upon or closed</span><br><span class="line">    at java.util.stream.AbstractPipeline.evaluate(AbstractPipeline.java:<span class="number">229</span>)</span><br><span class="line">    at java.util.stream.ReferencePipeline.noneMatch(ReferencePipeline.java:<span class="number">459</span>)</span><br><span class="line">    at com.winterbe.java8.Streams5.test7(Streams5.java:<span class="number">38</span>)</span><br><span class="line">    at com.winterbe.java8.Streams5.main(Streams5.java:<span class="number">28</span>)</span><br></pre></td></tr></table></figure>
<p>为了克服此限制，我们必须为要执行的每个终端操作创建一个新的流链，例如，我们可以创建一个流提供程序以构造一个已经设置了所有中间操作的新流：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">Supplier&lt;Stream&lt;String&gt;&gt; streamSupplier =</span><br><span class="line">    () -&gt; Stream.of(<span class="string">"d2"</span>, <span class="string">"a2"</span>, <span class="string">"b1"</span>, <span class="string">"b3"</span>, <span class="string">"c"</span>)</span><br><span class="line">            .filter(s -&gt; s.startsWith(<span class="string">"a"</span>));</span><br><span class="line"></span><br><span class="line">streamSupplier.get().anyMatch(s -&gt; <span class="keyword">true</span>);   <span class="comment">// ok</span></span><br><span class="line">streamSupplier.get().noneMatch(s -&gt; <span class="keyword">true</span>);  <span class="comment">// ok</span></span><br></pre></td></tr></table></figure>
<p>每次调用都会<code>get()</code>构造一个新的流，我们可以保存该流以调用所需的终端操作。</p>
<h3 id="高级操作"><a href="#高级操作" class="headerlink" title="高级操作"></a>高级操作</h3><p>流支持许多不同的操作。我们已经了解了最重要的操作，例如<code>filter</code>或<code>map</code>。我留给您发现所有其他可用的操作（请参阅Stream Javadoc）。相反，让我们更深入地了解了更复杂的操作<code>collect</code>，<code>flatMap</code>和<code>reduce</code>。</p>
<p>本节中的大多数代码示例都使用以下人员进行演示：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Person</span> </span>&#123;</span><br><span class="line">    String name;</span><br><span class="line">    <span class="keyword">int</span> age;</span><br><span class="line"></span><br><span class="line">    Person(String name, <span class="keyword">int</span> age) &#123;</span><br><span class="line">        <span class="keyword">this</span>.name = name;</span><br><span class="line">        <span class="keyword">this</span>.age = age;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">toString</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> name;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">List&lt;Person&gt; persons =</span><br><span class="line">    Arrays.asList(</span><br><span class="line">        <span class="keyword">new</span> Person(<span class="string">"Max"</span>, <span class="number">18</span>),</span><br><span class="line">        <span class="keyword">new</span> Person(<span class="string">"Peter"</span>, <span class="number">23</span>),</span><br><span class="line">        <span class="keyword">new</span> Person(<span class="string">"Pamela"</span>, <span class="number">23</span>),</span><br><span class="line">        <span class="keyword">new</span> Person(<span class="string">"David"</span>, <span class="number">12</span>));</span><br></pre></td></tr></table></figure>
<h4 id="收集"><a href="#收集" class="headerlink" title="收集"></a>收集</h4><p>收集是到流中的元素转换为不同的种类的结果，例如一个非常有用的终端操作<code>List</code>，<code>Set</code>或<code>Map</code>。收集接受C<code>ollector</code>由四个不同的操作组成的：供应商，累加器，合并器和装订器。乍一看，这听起来超级复杂，但是好地方是Java 8通过<code>Collectors</code>该类支持各种内置的收集器。因此，对于最常见的操作，您不必自己实现收集器。</p>
<p>让我们从一个非常常见的用例开始：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">List&lt;Person&gt; filtered =</span><br><span class="line">    persons</span><br><span class="line">        .stream()</span><br><span class="line">        .filter(p -&gt; p.name.startsWith(<span class="string">"P"</span>))</span><br><span class="line">        .collect(Collectors.toList());</span><br><span class="line"></span><br><span class="line">System.out.println(filtered);    <span class="comment">// [Peter, Pamela]</span></span><br></pre></td></tr></table></figure>
<p>如您所见，从流的元素构造列表非常简单。需要一个集合而不是列表-只需使用<code>Collectors.toSet()</code>。</p>
<p>下一个示例按年龄对所有人进行分组：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">Map&lt;Integer, List&lt;Person&gt;&gt; personsByAge = persons</span><br><span class="line">    .stream()</span><br><span class="line">    .collect(Collectors.groupingBy(p -&gt; p.age));</span><br><span class="line"></span><br><span class="line">personsByAge</span><br><span class="line">    .forEach((age, p) -&gt; System.out.format(<span class="string">"age %s: %s\n"</span>, age, p));</span><br><span class="line"></span><br><span class="line"><span class="comment">// age 18: [Max]</span></span><br><span class="line"><span class="comment">// age 23: [Peter, Pamela]</span></span><br><span class="line"><span class="comment">// age 12: [David]</span></span><br></pre></td></tr></table></figure>
<p>收集器功能极为丰富。您还可以在信息流的元素上创建汇总，例如，确定所有人的平均年龄：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">Double averageAge = persons</span><br><span class="line">    .stream()</span><br><span class="line">    .collect(Collectors.averagingInt(p -&gt; p.age));</span><br><span class="line"></span><br><span class="line">System.out.println(averageAge);     <span class="comment">// 19.0</span></span><br></pre></td></tr></table></figure>
<p>如果您对更全面的统计感兴趣，则汇总收集器将返回一个特殊的内置汇总统计对象。因此，我们可以简单地确定人员的最小，最大和算术平均年龄以及总数和计数。</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">IntSummaryStatistics ageSummary =</span><br><span class="line">    persons</span><br><span class="line">        .stream()</span><br><span class="line">        .collect(Collectors.summarizingInt(p -&gt; p.age));</span><br><span class="line"></span><br><span class="line">System.out.println(ageSummary);</span><br><span class="line"><span class="comment">// IntSummaryStatistics&#123;count=4, sum=76, min=12, average=19.000000, max=23&#125;</span></span><br></pre></td></tr></table></figure>
<p>下一个示例将所有人连接成一个字符串：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">String phrase = persons</span><br><span class="line">    .stream()</span><br><span class="line">    .filter(p -&gt; p.age &gt;= <span class="number">18</span>)</span><br><span class="line">    .map(p -&gt; p.name)</span><br><span class="line">    .collect(Collectors.joining(<span class="string">" and "</span>, <span class="string">"In Germany "</span>, <span class="string">" are of legal age."</span>));</span><br><span class="line"></span><br><span class="line">System.out.println(phrase);</span><br><span class="line"><span class="comment">// In Germany Max and Peter and Pamela are of legal age.</span></span><br></pre></td></tr></table></figure>
<p>联接收集器接受定界符以及可选的前缀和后缀。</p>
<p>为了将流元素转换为映射，我们必须指定如何映射键和值。请记住，映射的键必须唯一，否则将<code>IllegalStateException</code>抛出。您可以选择将合并功能作为附加参数传递来绕过异常：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">Map&lt;Integer, String&gt; map = persons</span><br><span class="line">    .stream()</span><br><span class="line">    .collect(Collectors.toMap(</span><br><span class="line">        p -&gt; p.age,</span><br><span class="line">        p -&gt; p.name,</span><br><span class="line">        (name1, name2) -&gt; name1 + <span class="string">";"</span> + name2));</span><br><span class="line"></span><br><span class="line">System.out.println(map);</span><br><span class="line"><span class="comment">// &#123;18=Max, 23=Peter;Pamela, 12=David&#125;</span></span><br></pre></td></tr></table></figure>
<p>现在我们知道一些最强大的内置收集器，让我们尝试构建自己的特殊收集器。我们希望将流中的所有人转换为单个字符串，该字符串包含所有用|竖线字符分隔的大写字母名称。为了实现这一点，我们通过创建了一个新的收集器Collector.of()。我们必须通过收集器的四个要素：供应商，累加器，组合器和修整器。</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">Collector&lt;Person, StringJoiner, String&gt; personNameCollector =</span><br><span class="line">    Collector.of(</span><br><span class="line">        () -&gt; <span class="keyword">new</span> StringJoiner(<span class="string">" | "</span>),          <span class="comment">// supplier</span></span><br><span class="line">        (j, p) -&gt; j.add(p.name.toUpperCase()),  <span class="comment">// accumulator</span></span><br><span class="line">        (j1, j2) -&gt; j1.merge(j2),               <span class="comment">// combiner</span></span><br><span class="line">        StringJoiner::toString);                <span class="comment">// finisher</span></span><br><span class="line"></span><br><span class="line">String names = persons</span><br><span class="line">    .stream()</span><br><span class="line">    .collect(personNameCollector);</span><br><span class="line"></span><br><span class="line">System.out.println(names);  <span class="comment">// MAX | PETER | PAMELA | DAVID</span></span><br></pre></td></tr></table></figure>
<p>由于Java中的字符串是不可变的，因此我们需要一个帮助器类，<code>StringJoiner</code>以便让收集器构造我们的字符串。供应商最初使用适当的定界符构造此类StringJoiner。累加器用于将每个人的大写名称添加到StringJoiner。组合器知道如何将两个StringJoiners合并为一个。在最后一步，修整器从StringJoiner构造所需的String。</p>
<h4 id="FlatMap"><a href="#FlatMap" class="headerlink" title="FlatMap"></a>FlatMap</h4><p>我们已经学习了如何通过使用map操作将流的对象转换为另一种对象。映射是有限的，因为每个对象只能精确地映射到另一个对象。但是，如果我们想将一个对象转换成多个其他对象，或者根本不转换呢？这就是<code>flatMap</code>救援的地方。</p>
<p>FlatMap将流的每个元素转换为其他对象的流。因此，每个对象都将转换为零，一个或多个由流支持的其他对象。然后，将这些流的内容放入<code>flatMap</code>操作的返回流中。</p>
<p>在看到<code>flatMap</code>实际效果之前，我们需要一个适当的类型层次结构：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Foo</span> </span>&#123;</span><br><span class="line">    String name;</span><br><span class="line">    List&lt;Bar&gt; bars = <span class="keyword">new</span> ArrayList&lt;&gt;();</span><br><span class="line"></span><br><span class="line">    Foo(String name) &#123;</span><br><span class="line">        <span class="keyword">this</span>.name = name;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Bar</span> </span>&#123;</span><br><span class="line">    String name;</span><br><span class="line"></span><br><span class="line">    Bar(String name) &#123;</span><br><span class="line">        <span class="keyword">this</span>.name = name;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>接下来，我们利用关于流的知识来实例化几个对象：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">List&lt;Foo&gt; foos = <span class="keyword">new</span> ArrayList&lt;&gt;();</span><br><span class="line"></span><br><span class="line"><span class="comment">// create foos</span></span><br><span class="line">IntStream</span><br><span class="line">    .range(<span class="number">1</span>, <span class="number">4</span>)</span><br><span class="line">    .forEach(i -&gt; foos.add(<span class="keyword">new</span> Foo(<span class="string">"Foo"</span> + i)));</span><br><span class="line"></span><br><span class="line"><span class="comment">// create bars</span></span><br><span class="line">foos.forEach(f -&gt;</span><br><span class="line">    IntStream</span><br><span class="line">        .range(<span class="number">1</span>, <span class="number">4</span>)</span><br><span class="line">        .forEach(i -&gt; f.bars.add(<span class="keyword">new</span> Bar(<span class="string">"Bar"</span> + i + <span class="string">" &lt;- "</span> + f.name))));</span><br></pre></td></tr></table></figure>
<p>现在我们有了三个foo的列表，每个foo包含三个小节。</p>
<p>FlatMap接受一个必须返回对象流的函数。因此，为了解析每个foo的bar对象，我们只需传递适当的函数：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">foos.stream()</span><br><span class="line">    .flatMap(f -&gt; f.bars.stream())</span><br><span class="line">    .forEach(b -&gt; System.out.println(b.name));</span><br><span class="line"></span><br><span class="line"><span class="comment">// Bar1 &lt;- Foo1</span></span><br><span class="line"><span class="comment">// Bar2 &lt;- Foo1</span></span><br><span class="line"><span class="comment">// Bar3 &lt;- Foo1</span></span><br><span class="line"><span class="comment">// Bar1 &lt;- Foo2</span></span><br><span class="line"><span class="comment">// Bar2 &lt;- Foo2</span></span><br><span class="line"><span class="comment">// Bar3 &lt;- Foo2</span></span><br><span class="line"><span class="comment">// Bar1 &lt;- Foo3</span></span><br><span class="line"><span class="comment">// Bar2 &lt;- Foo3</span></span><br><span class="line"><span class="comment">// Bar3 &lt;- Foo3</span></span><br></pre></td></tr></table></figure>
<p>如您所见，我们已经成功地将三个foo对象的流转换为九个bar对象的流。</p>
<p>最后，以上代码示例可以简化为单个流操作管道：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">IntStream.range(<span class="number">1</span>, <span class="number">4</span>)</span><br><span class="line">    .mapToObj(i -&gt; <span class="keyword">new</span> Foo(<span class="string">"Foo"</span> + i))</span><br><span class="line">    .peek(f -&gt; IntStream.range(<span class="number">1</span>, <span class="number">4</span>)</span><br><span class="line">        .mapToObj(i -&gt; <span class="keyword">new</span> Bar(<span class="string">"Bar"</span> + i + <span class="string">" &lt;- "</span> f.name))</span><br><span class="line">        .forEach(f.bars::add))</span><br><span class="line">    .flatMap(f -&gt; f.bars.stream())</span><br><span class="line">    .forEach(b -&gt; System.out.println(b.name));</span><br></pre></td></tr></table></figure>
<p>FlatMap也可用于<code>Optional</code> Java 8中引入的类。Optionals <code>flatMap</code>操作返回另一种类型的可选对象。因此，它可以用来防止令人讨厌的<code>null</code>检查。</p>
<p>考虑这样一个高度分层的结构：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Outer</span> </span>&#123;</span><br><span class="line">    Nested nested;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Nested</span> </span>&#123;</span><br><span class="line">    Inner inner;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Inner</span> </span>&#123;</span><br><span class="line">    String foo;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>为了解析<code>foo</code>外部实例的内部字符串，您必须添加多个null检查以防止可能的NullPointerExceptions：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">Outer outer = <span class="keyword">new</span> Outer();</span><br><span class="line"><span class="keyword">if</span> (outer != <span class="keyword">null</span> &amp;&amp; outer.nested != <span class="keyword">null</span> &amp;&amp; outer.nested.inner != <span class="keyword">null</span>) &#123;</span><br><span class="line">    System.out.println(outer.nested.inner.foo);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>通过使用可选<code>flatMap</code>操作可以获得相同的行为：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">Optional.of(<span class="keyword">new</span> Outer())</span><br><span class="line">    .flatMap(o -&gt; Optional.ofNullable(o.nested))</span><br><span class="line">    .flatMap(n -&gt; Optional.ofNullable(n.inner))</span><br><span class="line">    .flatMap(i -&gt; Optional.ofNullable(i.foo))</span><br><span class="line">    .ifPresent(System.out::println);</span><br></pre></td></tr></table></figure>
<p>每次调用时，如果存在或不存在，则<code>flatMap</code>返回一个<code>Optional</code>包装所需对象的包装null。</p>
<h4 id="减少"><a href="#减少" class="headerlink" title="减少"></a>减少</h4><p>归约运算将流的所有元素组合为单个结果。Java 8支持三种不同的<code>reduce</code>方法。第一个将元素流简化为该流的一个元素。让我们看看如何使用此方法确定最大的人：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">persons</span><br><span class="line">    .stream()</span><br><span class="line">    .reduce((p1, p2) -&gt; p1.age &gt; p2.age ? p1 : p2)</span><br><span class="line">    .ifPresent(System.out::println);    <span class="comment">// Pamela</span></span><br></pre></td></tr></table></figure>
<p>该<code>reduce</code>方法接受<code>BinaryOperator</code>累加器功能。<code>BiFunction</code>在这种情况下，实际上这是两个操作数共享相同类型的地方<code>Person</code>。<code>BiFunction</code>就像，<code>Function</code>但是接受两个参数。示例函数比较两个人的年龄，以便返回最大年龄的人。</p>
<p>第二种<code>reduce</code>方法接受身份值和<code>BinaryOperator</code>累加器。可使用此方法来构造一个新人员，并使用流中所有其他人员的姓名和年龄进行汇总：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">Person result =</span><br><span class="line">    persons</span><br><span class="line">        .stream()</span><br><span class="line">        .reduce(<span class="keyword">new</span> Person(<span class="string">""</span>, <span class="number">0</span>), (p1, p2) -&gt; &#123;</span><br><span class="line">            p1.age += p2.age;</span><br><span class="line">            p1.name += p2.name;</span><br><span class="line">            <span class="keyword">return</span> p1;</span><br><span class="line">        &#125;);</span><br><span class="line"></span><br><span class="line">System.out.format(<span class="string">"name=%s; age=%s"</span>, result.name, result.age);</span><br><span class="line"><span class="comment">// name=MaxPeterPamelaDavid; age=76</span></span><br></pre></td></tr></table></figure>
<p>第三种<code>reduce</code>方法接受三个参数：标识值，<code>BiFunction</code>累加器和type的组合器函数<code>BinaryOperator</code>。由于身份值类型不限于该<code>Person</code>类型，因此我们可以利用此归约法确定所有人的年龄总和：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">Integer ageSum = persons</span><br><span class="line">    .stream()</span><br><span class="line">    .reduce(<span class="number">0</span>, (sum, p) -&gt; sum += p.age, (sum1, sum2) -&gt; sum1 + sum2);</span><br><span class="line"></span><br><span class="line">System.out.println(ageSum);  <span class="comment">// 76</span></span><br></pre></td></tr></table></figure>
<p>如您所见，结果是76，但是到底发生了什么？让我们通过一些调试输出扩展上面的代码：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">Integer ageSum = persons</span><br><span class="line">    .stream()</span><br><span class="line">    .reduce(<span class="number">0</span>,</span><br><span class="line">        (sum, p) -&gt; &#123;</span><br><span class="line">            System.out.format(<span class="string">"accumulator: sum=%s; person=%s\n"</span>, sum, p);</span><br><span class="line">            <span class="keyword">return</span> sum += p.age;</span><br><span class="line">        &#125;,</span><br><span class="line">        (sum1, sum2) -&gt; &#123;</span><br><span class="line">            System.out.format(<span class="string">"combiner: sum1=%s; sum2=%s\n"</span>, sum1, sum2);</span><br><span class="line">            <span class="keyword">return</span> sum1 + sum2;</span><br><span class="line">        &#125;);</span><br><span class="line"></span><br><span class="line"><span class="comment">// accumulator: sum=0; person=Max</span></span><br><span class="line"><span class="comment">// accumulator: sum=18; person=Peter</span></span><br><span class="line"><span class="comment">// accumulator: sum=41; person=Pamela</span></span><br><span class="line"><span class="comment">// accumulator: sum=64; person=David</span></span><br></pre></td></tr></table></figure>
<p>如您所见，累加器功能完成了所有工作。首先使用初始标识值0和第一人称Max进行调用。在接下来的三个步骤中<code>sum</code>，根据最后一个步骤的年龄，人员不断增加，总年龄达到76岁。</p>
<p>等待扫管?？组合器永远不会被调用？并行执行相同的流将揭秘：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">Integer ageSum = persons</span><br><span class="line">    .parallelStream()</span><br><span class="line">    .reduce(<span class="number">0</span>,</span><br><span class="line">        (sum, p) -&gt; &#123;</span><br><span class="line">            System.out.format(<span class="string">"accumulator: sum=%s; person=%s\n"</span>, sum, p);</span><br><span class="line">            <span class="keyword">return</span> sum += p.age;</span><br><span class="line">        &#125;,</span><br><span class="line">        (sum1, sum2) -&gt; &#123;</span><br><span class="line">            System.out.format(<span class="string">"combiner: sum1=%s; sum2=%s\n"</span>, sum1, sum2);</span><br><span class="line">            <span class="keyword">return</span> sum1 + sum2;</span><br><span class="line">        &#125;);</span><br><span class="line"></span><br><span class="line"><span class="comment">// accumulator: sum=0; person=Pamela</span></span><br><span class="line"><span class="comment">// accumulator: sum=0; person=David</span></span><br><span class="line"><span class="comment">// accumulator: sum=0; person=Max</span></span><br><span class="line"><span class="comment">// accumulator: sum=0; person=Peter</span></span><br><span class="line"><span class="comment">// combiner: sum1=18; sum2=23</span></span><br><span class="line"><span class="comment">// combiner: sum1=23; sum2=12</span></span><br><span class="line"><span class="comment">// combiner: sum1=41; sum2=35</span></span><br></pre></td></tr></table></figure>
<p>并行执行此流将导致完全不同的执行行为。现在实际上调用了合并器。由于累加器是并行调用的，因此需要组合器来汇总单独的累加值。</p>
<p>在下一章中，让我们更深入地研究并行流。</p>
<h3 id="并行数据流"><a href="#并行数据流" class="headerlink" title="并行数据流"></a>并行数据流</h3><p>可以并行执行流，以提高大量输入元素上的运行时性能。并行流使用<code>ForkJoinPool</code>可通过静态<code>ForkJoinPool.commonPool()</code>方法获得的公共变量。基础线程池的大小最多使用五个线程-取决于可用物理CPU内核的数量：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">ForkJoinPool commonPool = ForkJoinPool.commonPool();</span><br><span class="line">System.out.println(commonPool.getParallelism());    <span class="comment">// 3</span></span><br></pre></td></tr></table></figure>
<p>在我的机器上，默认情况下，公共池的并行度为3。可以通过设置以下JVM参数来减小或增大此值：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">-Djava.util.concurrent.ForkJoinPool.common.parallelism=<span class="number">5</span></span><br></pre></td></tr></table></figure>
<p>集合支持<code>parallelStream()</code>创建元素并行流的方法。或者，您可以<code>parallel()</code>在给定流上调用中间方法，以将顺序流转换为并行对应流。</p>
<p>为了低估并行流的并行执行行为，下一个示例将有关当前线程的信息打印到<code>sout</code>：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">Arrays.asList(<span class="string">"a1"</span>, <span class="string">"a2"</span>, <span class="string">"b1"</span>, <span class="string">"c2"</span>, <span class="string">"c1"</span>)</span><br><span class="line">    .parallelStream()</span><br><span class="line">    .filter(s -&gt; &#123;</span><br><span class="line">        System.out.format(<span class="string">"filter: %s [%s]\n"</span>,</span><br><span class="line">            s, Thread.currentThread().getName());</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">true</span>;</span><br><span class="line">    &#125;)</span><br><span class="line">    .map(s -&gt; &#123;</span><br><span class="line">        System.out.format(<span class="string">"map: %s [%s]\n"</span>,</span><br><span class="line">            s, Thread.currentThread().getName());</span><br><span class="line">        <span class="keyword">return</span> s.toUpperCase();</span><br><span class="line">    &#125;)</span><br><span class="line">    .forEach(s -&gt; System.out.format(<span class="string">"forEach: %s [%s]\n"</span>,</span><br><span class="line">        s, Thread.currentThread().getName()));</span><br></pre></td></tr></table></figure>
<p>通过研究调试输出，我们应该更好地了解哪些线程实际用于执行流操作：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">filter:  b1 [main]</span><br><span class="line">filter:  a2 [ForkJoinPool.commonPool-worker-<span class="number">1</span>]</span><br><span class="line">map:     a2 [ForkJoinPool.commonPool-worker-<span class="number">1</span>]</span><br><span class="line">filter:  c2 [ForkJoinPool.commonPool-worker-<span class="number">3</span>]</span><br><span class="line">map:     c2 [ForkJoinPool.commonPool-worker-<span class="number">3</span>]</span><br><span class="line">filter:  c1 [ForkJoinPool.commonPool-worker-<span class="number">2</span>]</span><br><span class="line">map:     c1 [ForkJoinPool.commonPool-worker-<span class="number">2</span>]</span><br><span class="line">forEach: C2 [ForkJoinPool.commonPool-worker-<span class="number">3</span>]</span><br><span class="line">forEach: A2 [ForkJoinPool.commonPool-worker-<span class="number">1</span>]</span><br><span class="line">map:     b1 [main]</span><br><span class="line">forEach: B1 [main]</span><br><span class="line">filter:  a1 [ForkJoinPool.commonPool-worker-<span class="number">3</span>]</span><br><span class="line">map:     a1 [ForkJoinPool.commonPool-worker-<span class="number">3</span>]</span><br><span class="line">forEach: A1 [ForkJoinPool.commonPool-worker-<span class="number">3</span>]</span><br><span class="line">forEach: C1 [ForkJoinPool.commonPool-worker-<span class="number">2</span>]</span><br></pre></td></tr></table></figure>
<p>如您所见，并行流利用通用中所有可用线程<code>ForkJoinPool</code>来执行流操作。在连续运行中，输出可能会有所不同，因为实际使用特定线程的行为是不确定的。</p>
<p>让我们通过附加的流操作扩展该示例<code>sort</code>：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">Arrays.asList(<span class="string">"a1"</span>, <span class="string">"a2"</span>, <span class="string">"b1"</span>, <span class="string">"c2"</span>, <span class="string">"c1"</span>)</span><br><span class="line">    .parallelStream()</span><br><span class="line">    .filter(s -&gt; &#123;</span><br><span class="line">        System.out.format(<span class="string">"filter: %s [%s]\n"</span>,</span><br><span class="line">            s, Thread.currentThread().getName());</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">true</span>;</span><br><span class="line">    &#125;)</span><br><span class="line">    .map(s -&gt; &#123;</span><br><span class="line">        System.out.format(<span class="string">"map: %s [%s]\n"</span>,</span><br><span class="line">            s, Thread.currentThread().getName());</span><br><span class="line">        <span class="keyword">return</span> s.toUpperCase();</span><br><span class="line">    &#125;)</span><br><span class="line">    .sorted((s1, s2) -&gt; &#123;</span><br><span class="line">        System.out.format(<span class="string">"sort: %s &lt;&gt; %s [%s]\n"</span>,</span><br><span class="line">            s1, s2, Thread.currentThread().getName());</span><br><span class="line">        <span class="keyword">return</span> s1.compareTo(s2);</span><br><span class="line">    &#125;)</span><br><span class="line">    .forEach(s -&gt; System.out.format(<span class="string">"forEach: %s [%s]\n"</span>,</span><br><span class="line">        s, Thread.currentThread().getName()));</span><br></pre></td></tr></table></figure>
<p>起初结果可能看起来很奇怪：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">filter:  c2 [ForkJoinPool.commonPool-worker-<span class="number">3</span>]</span><br><span class="line">filter:  c1 [ForkJoinPool.commonPool-worker-<span class="number">2</span>]</span><br><span class="line">map:     c1 [ForkJoinPool.commonPool-worker-<span class="number">2</span>]</span><br><span class="line">filter:  a2 [ForkJoinPool.commonPool-worker-<span class="number">1</span>]</span><br><span class="line">map:     a2 [ForkJoinPool.commonPool-worker-<span class="number">1</span>]</span><br><span class="line">filter:  b1 [main]</span><br><span class="line">map:     b1 [main]</span><br><span class="line">filter:  a1 [ForkJoinPool.commonPool-worker-<span class="number">2</span>]</span><br><span class="line">map:     a1 [ForkJoinPool.commonPool-worker-<span class="number">2</span>]</span><br><span class="line">map:     c2 [ForkJoinPool.commonPool-worker-<span class="number">3</span>]</span><br><span class="line">sort:    A2 &lt;&gt; A1 [main]</span><br><span class="line">sort:    B1 &lt;&gt; A2 [main]</span><br><span class="line">sort:    C2 &lt;&gt; B1 [main]</span><br><span class="line">sort:    C1 &lt;&gt; C2 [main]</span><br><span class="line">sort:    C1 &lt;&gt; B1 [main]</span><br><span class="line">sort:    C1 &lt;&gt; C2 [main]</span><br><span class="line">forEach: A1 [ForkJoinPool.commonPool-worker-<span class="number">1</span>]</span><br><span class="line">forEach: C2 [ForkJoinPool.commonPool-worker-<span class="number">3</span>]</span><br><span class="line">forEach: B1 [main]</span><br><span class="line">forEach: A2 [ForkJoinPool.commonPool-worker-<span class="number">2</span>]</span><br><span class="line">forEach: C1 [ForkJoinPool.commonPool-worker-<span class="number">1</span>]</span><br></pre></td></tr></table></figure>
<p>似乎<code>sort</code>只在主线程上顺序执行。实际上，<code>sort</code>在并行流上，在后台使用了新的Java 8方法<code>Arrays.parallelSort()</code>。如Javadoc中所述，此方法决定数组的长度是排序是顺序执行还是并行执行：</p>
<p><em>如果指定数组的长度小于最小粒度，则使用适当的Arrays.sort方法对其进行排序。</em></p>
<p>回到上<code>reduce</code>一节的示例。我们已经发现，组合器函数仅在并行流中调用，而不在顺序流中调用。让我们看看实际涉及到哪些线程：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">List&lt;Person&gt; persons = Arrays.asList(</span><br><span class="line">    <span class="keyword">new</span> Person(<span class="string">"Max"</span>, <span class="number">18</span>),</span><br><span class="line">    <span class="keyword">new</span> Person(<span class="string">"Peter"</span>, <span class="number">23</span>),</span><br><span class="line">    <span class="keyword">new</span> Person(<span class="string">"Pamela"</span>, <span class="number">23</span>),</span><br><span class="line">    <span class="keyword">new</span> Person(<span class="string">"David"</span>, <span class="number">12</span>));</span><br><span class="line"></span><br><span class="line">persons</span><br><span class="line">    .parallelStream()</span><br><span class="line">    .reduce(<span class="number">0</span>,</span><br><span class="line">        (sum, p) -&gt; &#123;</span><br><span class="line">            System.out.format(<span class="string">"accumulator: sum=%s; person=%s [%s]\n"</span>,</span><br><span class="line">                sum, p, Thread.currentThread().getName());</span><br><span class="line">            <span class="keyword">return</span> sum += p.age;</span><br><span class="line">        &#125;,</span><br><span class="line">        (sum1, sum2) -&gt; &#123;</span><br><span class="line">            System.out.format(<span class="string">"combiner: sum1=%s; sum2=%s [%s]\n"</span>,</span><br><span class="line">                sum1, sum2, Thread.currentThread().getName());</span><br><span class="line">            <span class="keyword">return</span> sum1 + sum2;</span><br><span class="line">        &#125;);</span><br></pre></td></tr></table></figure>
<p>控制台输出显示，累加器和合并器函数在所有可用线程上并行执行：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">accumulator: sum=<span class="number">0</span>; person=Pamela; [main]</span><br><span class="line">accumulator: sum=<span class="number">0</span>; person=Max;    [ForkJoinPool.commonPool-worker-<span class="number">3</span>]</span><br><span class="line">accumulator: sum=<span class="number">0</span>; person=David;  [ForkJoinPool.commonPool-worker-<span class="number">2</span>]</span><br><span class="line">accumulator: sum=<span class="number">0</span>; person=Peter;  [ForkJoinPool.commonPool-worker-<span class="number">1</span>]</span><br><span class="line">combiner:    sum1=<span class="number">18</span>; sum2=<span class="number">23</span>;     [ForkJoinPool.commonPool-worker-<span class="number">1</span>]</span><br><span class="line">combiner:    sum1=<span class="number">23</span>; sum2=<span class="number">12</span>;     [ForkJoinPool.commonPool-worker-<span class="number">2</span>]</span><br><span class="line">combiner:    sum1=<span class="number">41</span>; sum2=<span class="number">35</span>;     [ForkJoinPool.commonPool-worker-<span class="number">2</span>]</span><br></pre></td></tr></table></figure>
<p>总之，可以说并行流可以为具有大量输入元素的流带来不错的性能提升。但是，请记住，像一些并行流操作<code>reduce</code>，并<code>collect</code>需要额外的计算（组合操作）时，依次执行其中不需要。</p>
<p>此外，我们了解到所有并行流操作共享相同的JVM范围的common <code>ForkJoinPool</code>。因此，您可能要避免实施缓慢的阻塞流操作，因为这有可能减慢应用程序中严重依赖并行流的其他部分的速度。</p>
<p><a href="https://winterbe.com/posts/2014/07/31/java8-stream-tutorial-examples/#different-kind-of-streams" target="_blank" rel="noopener">https://winterbe.com/posts/2014/07/31/java8-stream-tutorial-examples/#different-kind-of-streams</a> 的翻译版</p>
]]></content>
      <categories>
        <category>Java</category>
      </categories>
      <tags>
        <tag>Java8</tag>
        <tag>Stream流</tag>
      </tags>
  </entry>
  <entry>
    <title>吟诗一首</title>
    <url>/2020/04/26/2020/04/26%E9%9A%8F%E7%AC%94/</url>
    <content><![CDATA[  <center> 三十而立已到中年，技术平平且不善言辞。</center>
  <center> ​每逢面试十面九散，未来何期也诚惶诚恐。</center>
   <a id="more"></a>
   <center>数十余年人在漂泊，碌碌无为还不知不觉。</center>
  <center> ​二零一九新冠肺炎，方然顿悟欲难欲要抗。</center>
   <center>便是一生无功与名，愿为妻儿换一世太平。</center>

   <center>摘自V2EX有感</center>]]></content>
      <categories>
        <category>生活</category>
      </categories>
      <tags>
        <tag>随笔</tag>
      </tags>
  </entry>
</search>
